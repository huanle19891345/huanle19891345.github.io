<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/linux/</link>
    <description>Recent content in linux on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux_io</title>
      <link>https://huanle19891345.github.io/en/linux/linux_io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/linux/linux_io/</guid>
      <description>linux基础——linux下五种IO模型小结（阻塞IO、非阻塞IO、IO复用、信号驱动式IO、异步IO）
Java IO：阻塞/非阻塞式IO、同步/异步IO
Linux IO模式及 select、poll、epoll详解
IO操作两个阶段 再说一下IO发生时涉及的对象和步骤。以read函数举例，对于一个networkIO会涉及到两个系统对象，一个是调用这个IO的process (or thread)，另一个就是系统内核(kernel)。当一个read操作发生时，它会经历两个阶段：
（1）等待数据准备(Waitingfor the data to be ready)
（2）将数据从内核拷贝到进程中(Copyingthe data from the kernel to the process)
记住这两点很重要，因为这些IO Model的区别就是在两个阶段上各有不同的情况。是否阻塞说的是第一个阶段，即等待数据准备阶段是否会阻塞，而是否同步说的是第二阶段，即将数据从内核拷贝到进程这个真实的IO Operation操作阶段是否阻塞。
FileObserver基于inotify
Looper基于epoll
https://stackoverflow.com/questions/17207809/difference-between-inotify-and-epoll
inotify  inotify_init(void) creates inotify instance to read events from inotify_add_watch(int fd, const char * path, int mask) returns a watch fd around the file node behind the path inotify_rm_watch(int fd, int wd) stops watching for events on fd  epoll  epoll_create(void) creates epoll object epoll_ctl(int epfd, int op, int fd, struct epoll_event * event) sets up events to watch epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout); blocks until event happens  The biggest difference is that epoll can be used for ANY fd.</description>
    </item>
    
  </channel>
</rss>
