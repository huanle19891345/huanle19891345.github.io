<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aop on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/android/aop/</link>
    <description>Recent content in aop on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/android/aop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASM访客者模式</title>
      <link>https://huanle19891345.github.io/en/android/aop/asm%E8%AE%BF%E5%AE%A2%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/aop/asm%E8%AE%BF%E5%AE%A2%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>ASM访客者 is = new FileInputStream(classFile); ClassReader classReader = new ClassReader(is); ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS); ClassVisitor classVisitor = new TraceClassAdapter(Opcodes.ASM5, classWriter); classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES); is.close(); if (output.isDirectory()) { os = new FileOutputStream(changedFileOutput); } else { os = new FileOutputStream(output); } os.write(classWriter.toByteArray()); os.close(); classReader用来读取来自inputstream的class字节码，并在遍历到类和方法时分别调用到visit和visitMethod方法，参数为解析出的信息
graph LR FileInputStream--&amp;gt;classReader classReader--&amp;gt;ClassVisitor ClassVisitor--&amp;gt;ClassWriter ClassWriter--&amp;gt;FileOutputStream @Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) { 在方法开始处插桩AppMethodBeat.i(methodId)方法
@Override protected void onMethodEnter() { TraceMethod traceMethod = collectedMethodMap.</description>
    </item>
    
    <item>
      <title>JDK动态代理</title>
      <link>https://huanle19891345.github.io/en/android/aop/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/aop/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>Proxy /** parameter types of a proxy class constructor */ private static final Class&amp;lt;?&amp;gt;[] constructorParams = { InvocationHandler.class }; /** \* a cache of proxy classes */ private static final WeakCache&amp;lt;ClassLoader, Class&amp;lt;?&amp;gt;[], Class&amp;lt;?&amp;gt;&amp;gt; proxyClassCache = new WeakCache&amp;lt;&amp;gt;(new KeyFactory(), new ProxyClassFactory()); newProxyInstance public static Object newProxyInstance(ClassLoader loader, Class&amp;lt;?&amp;gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException { final Class&amp;lt;?&amp;gt;[] intfs = interfaces.clone(); /* \* Look up or generate the designated proxy class. */ Class&amp;lt;?&amp;gt; cl = getProxyClass0(loader, intfs);//main  final Constructor&amp;lt;?</description>
    </item>
    
    <item>
      <title>编译插桩和动态代理</title>
      <link>https://huanle19891345.github.io/en/android/aop/%E7%BC%96%E8%AF%91%E6%8F%92%E6%A1%A9%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/aop/%E7%BC%96%E8%AF%91%E6%8F%92%E6%A1%A9%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>编译插桩技术 Kotlin Symbol Processing (KSP) Alpha 版现已发布
ByteX https://github.com/bytedance/ByteX
ASM https://asm.ow2.io/
【Android】函数插桩（Gradle + ASM）
 ASM代码生成 在Android Studio中安装ASM Bytecode Viewer插件； 2、安装后，在编译器中，点击右键，选择Show Bytecode Viewer；  查看java字节码:
jclasslib插件，View-&amp;gt;Show ByteCode with jclasslib
极客时间&amp;ndash;android开发高手课07-sample项目
compile group: &amp;#39;org.ow2.asm&amp;#39;, name: &amp;#39;asm&amp;#39;, version: &amp;#39;5.1&amp;#39; compile group: &amp;#39;org.ow2.asm&amp;#39;, name: &amp;#39;asm-commons&amp;#39;, version: &amp;#39;5.1&amp;#39; 通过反射注入transform
project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() { @Override public void graphPopulated(TaskExecutionGraph taskGraph) { for (Task task : taskGraph.getAllTasks()) { if ((task.name.equalsIgnoreCase(hackTransformTaskName) || task.name.equalsIgnoreCase(hackTransformTaskNameForWrapper)) &amp;amp;&amp;amp; !(((TransformTask) task).getTransform() instanceof SystemTraceTransform)) { project.</description>
    </item>
    
  </channel>
</rss>
