<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xcrash on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/</link>
    <description>Recent content in xcrash on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1xCrash原理</title>
      <link>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/1xcrash%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/1xcrash%E5%8E%9F%E7%90%86/</guid>
      <description>xCrash 架构与实现 整体架构 xCrash 整体分为两部分：运行于崩溃的 APP 进程内的部分，和独立进程的部分（我们称为 dumper）。
1、APP 进程内 这部分可以再分为 Java 和 native 两个部分。
（1）Java 部分： ①Java 崩溃捕获。直接使用 JVM 提供的机制来完成，最后生成兼容 tombstone 格式的 dump 文件。
②Native 崩溃捕获机制的注册器。通过 JNI 激活 native 层的对应机制。
③Tombstone 文件解析器。可以将 tombstone 文件解析成 json 格式。
④Tombstone 文件管理器。可以检索设备上已经生成的 tombstone 文件。
（2）Native 部分： ①JNI Bridge。负责与 Java 层的交互。（传参与回调）
②Signal handlers。负责信号捕获，以及启动独立进程 dumper。
③Fallback mode。负责当 dumper 捕获崩溃信息失败时，尝试在崩溃进行的 signal handler 中收集崩溃信息。
2、Dumper 独立进程 这部分是纯 native 的实现： ①Process。负责崩溃进程中各个线程的控制（attach 和 detach），以及进程层面的信息收集，比如 FD 列表、logcat 等等。
②Threads。负责崩溃进程中的线程相关数据的收集，比如 registers、backtrace、stack 等等。</description>
    </item>
    
    <item>
      <title>linuxApi</title>
      <link>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/linuxapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/linuxapi/</guid>
      <description>dlsym https://linux.die.net/man/3/dlsym
void *dlsym(void *handle, const char *symbol); The function dlsym() takes a &amp;ldquo;handle&amp;rdquo; of a dynamic library returned by dlopen() and the null-terminated symbol name, returning the address where that symbol is loaded into memory.
pthread_create http://man7.org/linux/man-pages/man3/pthread_create.3.html
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);  The pthread_create() function starts a new thread in the calling process. The new thread starts execution by invoking start_routine(); arg is passed as the sole argument of start_routine().</description>
    </item>
    
    <item>
      <title>xCrashAnr</title>
      <link>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/xcrashanr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/xcrashanr/</guid>
      <description>总结 API level &amp;lt; 21 new FileObserver(&amp;quot;/data/anr/&amp;quot;, CLOSE_WRITE)
API level &amp;gt;= 21 SIGQUIT
ELFFormat 图解 sequenceDiagram SystemServer-&amp;gt;&amp;gt;xcc_signal_trace_register:SIGQUIT xcc_signal_trace_register-&amp;gt;&amp;gt;xcc_signal_trace_register:xc_trace_handler xcc_signal_trace_register-&amp;gt;&amp;gt;xc_trace_dumper:write(xc_trace_notifier, &amp;amp;data, sizeof(data) Note over xcc_signal_trace_register,xc_trace_dumper:和xc_trace_dumper线程通过阻塞式io通信 xc_trace_dumper-&amp;gt;&amp;gt;xc_trace_dumper: xc_trace_load_symbols activate xc_trace_dumper xc_trace_dumper-&amp;gt;&amp;gt;xc_trace_dumper: xc_dl_create Note right of xc_trace_dumper: xc_dl_find_map_start,/proc/self/maps中找到指定so,设置self-&amp;gt;map_start Note right of xc_trace_dumper: xc_dl_file_open(open and mmap so) Note right of xc_trace_dumper: xc_dl_parse_elf xc_trace_dumper-&amp;gt;&amp;gt;xc_trace_dumper: xc_dl_sym Note right of xc_trace_dumper: read each .symtab/.dynsym, 需要str_offset作为index指向的str等于当前目标str,则找到Sym Note right of xc_trace_dumper: (void *)(self-&amp;gt;map_start + sym-&amp;gt;st_value - self-&amp;gt;load_bias); deactivate xc_trace_dumper xc_trace_dumper-&amp;gt;&amp;gt;xc_trace_dumper: xc_trace_libart_runtime_dump activate xc_trace_dumper deactivate xc_trace_dumper Note right of xc_trace_dumper: 转调动态链接的系统so方法处理 Note right of xc_trace_dumper: Runtime::DumpForSigQuit(std::ostream&amp;amp; os)，dump本进程anr信息 xc_trace_init //xc_trace.</description>
    </item>
    
    <item>
      <title>xCrashNativeCrash</title>
      <link>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/xcrashnativecrash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E7%A8%B3%E5%AE%9A%E6%80%A7/%E5%BC%82%E5%B8%B8/xcrash/xcrashnativecrash/</guid>
      <description>原理时序图 sequenceDiagram CrashProcess-&amp;gt;&amp;gt;CrashProcess: xcc_signal_crash_register Note right of CrashProcess: 迭代注册每种信号监听,接收到信号调用xc_crash_signal_handler CrashProcess-&amp;gt;&amp;gt;CrashProcess: xc_crash_signal_handler(int sig, siginfo_t *si, void *uc) CrashProcess-&amp;gt;&amp;gt;DumperProcess: pid_t dumper_pid = xc_crash_fork(xc_crash_exec_dumper); CrashProcess-&amp;gt;&amp;gt;CrashProcess: waitpid(dumper_pid,...) Note right of CrashProcess: wait the crash dumper process terminated DumperProcess-&amp;gt;&amp;gt;DumperProcess: xc_crash_exec_dumper(void *arg) DumperProcess-&amp;gt;&amp;gt;DumperProcess: execl执行libxcrash_dumper.so.main activate DumperProcess DumperProcess-&amp;gt;&amp;gt;DumperProcess: xcd_process_create activate DumperProcess Note right of DumperProcess: 统计崩溃进程所有线程信息到队列xcd_core_proc-&amp;gt;thds，通过读取/proc/%d/task&amp;quot;, self-&amp;gt;pid实现 deactivate DumperProcess DumperProcess-&amp;gt;&amp;gt;CrashProcess: xcd_process_suspend_threads(xcd_core_proc) activate DumperProcess Note over DumperProcess,CrashProcess: suspend all threads in Crash process,通过系统调用ptrace(PTRACE_ATTACH, self-&amp;gt;tid,...))实现 deactivate DumperProcess DumperProcess-&amp;gt;&amp;gt;DumperProcess: xcd_process_load_info activate DumperProcess DumperProcess-&amp;gt;&amp;gt;DumperProcess: xcc_util_get_process_name activate DumperProcess Note right of DumperProcess: /proc/%d/cmdline,pid deactivate DumperProcess DumperProcess-&amp;gt;&amp;gt;DumperProcess: xcd_thread_load_info(&amp;amp;(thd-&amp;gt;t)); activate DumperProcess Note right of DumperProcess: 迭代每个线程,load thread info,&amp;quot;/proc/%d/comm&amp;quot;, tid,设置tname deactivate DumperProcess DumperProcess-&amp;gt;&amp;gt;DumperProcess: xcd_thread_load_regs(&amp;amp;(thd-&amp;gt;t)); activate DumperProcess Note right of DumperProcess: 迭代每个非crash线程,load thread regs,ptrace(PTRACE_GETREGSET, self-&amp;gt;tid.</description>
    </item>
    
  </channel>
</rss>
