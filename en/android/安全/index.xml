<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in 安全 on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>app签名</title>
      <link>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/app%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/app%E7%AD%BE%E5%90%8D/</guid>
      <description>ECDSA数字签名算法
Android N Signature Scheme v2 渠道打包
如果您使用 APK Signature Scheme v2 签署您的应用，并对应用进行了进一步更改，则应用的签名将无效。出于这个原因，请在使用 APK Signature Scheme v2 签署您的应用之前、而非之后使用 zipalign 等工具。 如需了解详细信息，请阅读相关的 Android Studio 文档，这些文档介绍了如何在 Android Studio 中签署应用以及如何使用 Android Plugin for Gradle 为签署应用配置构建文件。
APK文件格式 apk 本身是个 zip 格式, 格式可以参考http://blog.sina.com.cn/s/blog_4c3591bd0100zzm6.html.
apksigner https://www.jianshu.com/p/4a07d902066f
apksigner.bat sign &amp;ndash;ks 签名文件 &amp;ndash;ks-pass 密码 &amp;ndash;ks-key-alias 别名
Sdk\build-tools\28.0.3&amp;gt;apksigner.bat sign &amp;ndash;help
Sdk\build-tools\28.0.3\lib\apksigner.jar
–ks 你的jks路径 //jks签名证书路径
–ks-key-alias 你的alias //生成jks时指定的alias
–ks-pass pass:你的密码 //KeyStore密码
–key-pass pass:你的密码 //签署者的密码，即生成jks时指定alias对应的密码
–out output.apk //输出路径
input.apk //被签名的apk
示例：</description>
    </item>
    
    <item>
      <title>应用安全</title>
      <link>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/</guid>
      <description>防Hook 第一、Xposed框架将Hook信息存储在字段fieldCache，methodCache，constructorCache 中， 利用java 反射机制获取这些信息，检测Hook信息中是否含有App中敏感的方法，字段，构造方法
第二、检测进程中使用so名中包含关键”hack|inject|hook|call” 的信息，这个主要是防止有的人不用这个Xposed框架，而是直接自己写一个注入功能
第三、root检测原理是：是否含有su程序和ro.secure是否为1
第四、防止被Hook的方式就是可以查看XposedBridge这个类，有一个全局的hook开关，所有有的应用在启动的时候就用反射把这个值设置成true，这样Xposed的hook功能就是失效了
第五、如果应用被Xposed进行hook操作之后，抛出的异常堆栈信息中就会包含Xposed字样，所以可以通过应用自身内部抛出异常来检测是否包含Xposed字段来进行防护
Log 泄露app中的信息
线上仅仅写入文件，不打印log
完整性校验(防篡改)，签名 &amp;lt;应用安全防护和逆向分析&amp;gt;&amp;ndash;第12章
 MANIFEST.MF文件  包含了apk文件中所有文件的数据摘要内容SHA1+Base64,属性名为&amp;quot;SHA1-Digest&amp;quot;(安全散列算法) 另外还有一个&amp;quot;Name&amp;quot;属性，值为该文件在apk包中的路径, 例子:
Manifest-Version: 1.0 Name: AUTHORS SHA1-Digest: tNG7y16mMckMxD5PMWbMbm15YuM= Name: AndroidManifest.xml SHA1-Digest: DpoXWRs62IFQkzew0PZZ1IhBr4E= Name: META-INF/android.arch.lifecycle_livedata.version SHA1-Digest: OxxKFJcpzAROGjnfMbNijNv1+JU=  CERT.SF文件 计算MANIFEST.MF文件整体的SHA1值，再经过BASE64编码后记录在主属性(文件头)上的&amp;quot;SHA1-Digest-Mainifest&amp;quot;属性下 MANIFEST.MF文件的每个条目做一个SHA1+Base64之后记录在同名块中，属性名为&amp;quot;SHA1-Digest&amp;quot;, 例子:  Signature-Version: 1.0 Created-By: 1.0 (Android) SHA1-Digest-Manifest: lCe0n/umuXx2pJRbNdAPxSJQGyU= X-Android-APK-Signed: 2 Name: AUTHORS SHA1-Digest: NJvhMmfYrxh85l+E46t/lOXoRmk= Name: AndroidManifest.xml SHA1-Digest: N/26hYDkRfJLe6NEN7232YcVe1M= Name: META-INF/android.arch.lifecycle_livedata.version SHA1-Digest: MlMwWIwNpuS2rz/AzXm5Hqaliu4=  CERT.RSA文件 对CERT.SF文件用私钥加密出签名，再将签名以及包含公钥信息的数字证书一同写入CERT.RSA  二进制文件，因为RSA文件加密了，所以需要用openssl命令查看内容
openssl pkcs7 -inform DER -in CERT.</description>
    </item>
    
    <item>
      <title>网络请求安全</title>
      <link>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AE%89%E5%85%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AE%89%E5%85%A8/</guid>
      <description>https://httpcanary.com/zh-hans/install.html
安装根证书（必须） 安装证书要求设备必须设置锁屏密码或者图案，请按照系统提示进行设置（此乃系统限制与HttpCanary无关）
HttpCanary使用Man-in-the-Middle(MITM)技术抓取和解析TLS/SSL协议数据包，比如常见的HTTPS、WSS等加密请求，所以使用之前必须先安装HttpCanary根证书。安装时，默认点击确定即可，请勿修改配置。
SSL/TLS安全之——中间人攻击（MITM）浅析
httpcanary是通过VPN抓取数据包，因此通过禁用代理无法关闭抓包
手机上的httpcanary或PC上的ss打开都会导致正常通过代理进行抓包抓不到
https加密时，通过代理进行charles抓包时看到的数据时密文，但httpcanary看到的是明文，因为httpcanary是在应用层看到的未加密的数据和已解密的数据，加密解密发生在应用层和传输层之间。因此只能在业务上对网络参数进行加解密
Android Okhttp/Retrofit网络请求加解密实现方案
Android平台HTTPS抓包解决方案及问题分析 Android平台HTTPS抓包解决方案及问题分析
1. 抓包原理 几乎所有网络数据的抓包都是采用中间人的方式（MITM），包括大家常用的Fiddler、Charles等知名抓包工具，HttpCanary同样是使用中间人的方式进行抓包。
从上面这个原理图，可以看出抓包的核心问题主要是两个：
 MITM Server如何伪装成真正的Server； MITM Client如何伪装成真正的Client。  第一个问题，MITM Server要成为真正的Server，必须能够给指定域名签发公钥证书，且公钥证书能够通过系统的安全校验。比如Client发送了一条https://www.baidu.com/的网络请求，MITM Server要伪装成百度的Server，必须持有www.baidu.com域名的公钥证书并发给Client，同时还要有与公钥相匹配的私钥。
MITM Server的处理方式是从第一个SSL/TLS握手包Client Hello中提取出域名www.baidu.com，利用应用内置的CA证书创建www.baidu.com域名的公钥证书和私钥。创建的公钥证书在SSL/TLS握手的过程中发给Client，Client收到公钥证书后会由系统会对此证书进行校验，判断是否是百度公司持有的证书，但很明显这个证书是抓包工具伪造的。为了能够让系统校验公钥证书时认为证书是真实有效的，我们需要将抓包应用内置的CA证书手动安装到系统中，作为真正的证书发行商（CA），即洗白。这就是为什么，HTTPS抓包一定要先安装CA证书。
第二个问题，MITM Client伪装成Client。由于服务器并不会校验Client（绝大部分情况），所以这个问题一般不会存在。比如Server一般不会关心Client到底是Chrome浏览器还是IE浏览器，是Android App还是iOS App。当然，Server也是可以校验Client的，这个后面分析。
2. 安装CA证书 抓包应用内置的CA证书要洗白，必须安装到系统中。而Android系统将CA证书又分为两种：用户CA证书和系统CA证书。顾明思议，用户CA证书是由用户自行安装的，系统CA证书是由系统内置的，很明显后者更加真实有效。
系统CA证书存放在/etc/security/cacerts/目录下，名称是CA证书subjectDN的Md5值前四位移位取或，后缀名是.0，比如00673b5b.0。考虑到安全原因，系统CA证书需要有Root权限才能进行添加和删除。
对于非Root的Android设备，用户只能安装用户CA证书。
无论是系统CA证书还是用户CA证书，都可以在设置-&amp;gt;系统安全-&amp;gt;加密与凭据-&amp;gt;信任的凭据中查看
3. Android 7.0的用户CA证书限制 Android从7.0开始系统不再信任用户CA证书（应用targetSdkVersion &amp;gt;= 24时生效，如果targetSdkVersion &amp;lt; 24即使系统是7.0+依然会信任）。也就是说即使安装了用户CA证书，在Android 7.0+的机器上，targetSdkVersion &amp;gt;= 24的应用的HTTPS包就抓不到了。
比如上面的例子，抓包工具用内置的CA证书，创建了www.baidu.com域名的公钥证书发给Client，系统校验此证书时发现是用户CA证书签发的，sorry。。。
那么，我们如果绕过这种限制呢？已知有以下四种方式（低于7.0的系统请忽略）：
3.1 AndroidManifest中配置networkSecurityConfig
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;network-security-config&amp;gt; &amp;lt;base-config cleartextTrafficPermitted=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;trust-anchors&amp;gt; &amp;lt;certificates src=&amp;#34;system&amp;#34; /&amp;gt; &amp;lt;certificates src=&amp;#34;user&amp;#34; /&amp;gt; &amp;lt;/trust-anchors&amp;gt; &amp;lt;/base-config&amp;gt; &amp;lt;/network-security-config&amp;gt; 这样即表示，App信任用户CA证书，让系统对用户CA证书的校验给予通过。更多相关信息，详见Network security configuration。</description>
    </item>
    
  </channel>
</rss>
