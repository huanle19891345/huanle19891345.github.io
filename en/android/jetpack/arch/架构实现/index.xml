<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构实现 on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/</link>
    <description>Recent content in 架构实现 on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KaptGenerateViewModel</title>
      <link>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/kaptgenerateviewmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/kaptgenerateviewmodel/</guid>
      <description>Kapt编译时生成Viewmodel Android架构组件拥有生命周期的自动管理和数据解耦等优秀的功能，能够将传统MVP架构进行替换。在使用架构组件的过程中，我采用的方式是首先完成基础类
T 表示对应的retrofit service类型
abstract class BaseViewModel&amp;lt;T&amp;gt;(application: Application) : AndroidViewModel(application) { 之后针对Retrofit中的不同Service interface，继承并实现具体的viewmodel类，并针对每个service接口，需要编写一个liveData字段和对应的get或post方法提供给app层调用，同时对应的方法可能会存在三种类型:
1:直接调用service进行网络获取 package com.xxx.xxx.architecture.xxx import android.app.Application import android.arch.lifecycle.MediatorLiveData import com.baseproject.architecture.BaseViewModel import com.xxx.xxx.appbase.BaseAppLiveDataObserver /** * This file is generated by kapt, please do not edit this file */ open class BaseAnchorServiceViewModel(application: Application) : BaseViewModel&amp;lt;AnchorService&amp;gt;(application) { val getHotAnchorListLiveData: MediatorLiveData&amp;lt;kotlin.collections.List&amp;lt;SearchHotAnchorModel&amp;gt;&amp;gt; by lazy { MediatorLiveData&amp;lt;kotlin.collections.List&amp;lt;SearchHotAnchorModel&amp;gt;&amp;gt;() } fun getHotAnchorList() { mService.getHotAnchorList().subscribe(BaseAppLiveDataObserver(getHotAnchorListLiveData)) } } 2：使用本地缓存展示之后进行网络获取更新 val getUserAssetsLiveData: MediatorLiveData&amp;lt;UserAssetsModel&amp;gt; by lazy { MediatorLiveData&amp;lt;UserAssetsModel&amp;gt;() } fun getUserAssets() { object : BaseAppNetworkBoundResource&amp;lt;UserAssetsModel&amp;gt;(getUserAssetsLiveData) { override fun doApiCall(): Observable&amp;lt;UserAssetsModel&amp;gt; { return mService.</description>
    </item>
    
  </channel>
</rss>
