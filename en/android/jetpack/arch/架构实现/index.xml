<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构实现 on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/</link>
    <description>Recent content in 架构实现 on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KaptGenerateViewModel</title>
      <link>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/kaptgenerateviewmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/kaptgenerateviewmodel/</guid>
      <description>Kapt编译时生成Viewmodel Android架构组件拥有生命周期的自动管理和数据解耦等优秀的功能，能够将传统MVP架构进行替换。在使用架构组件的过程中，我采用的方式是首先完成基础类
T 表示对应的retrofit service类型
abstract class BaseViewModel&amp;lt;T&amp;gt;(application: Application) : AndroidViewModel(application) { 之后针对Retrofit中的不同Service interface，继承并实现具体的viewmodel类，并针对每个service接口，需要编写一个liveData字段和对应的get或post方法提供给app层调用，同时对应的方法可能会存在三种类型:
1:直接调用service进行网络获取 package com.xxx.xxx.architecture.xxx import android.app.Application import android.arch.lifecycle.MediatorLiveData import com.baseproject.architecture.BaseViewModel import com.xxx.xxx.appbase.BaseAppLiveDataObserver /** * This file is generated by kapt, please do not edit this file */ open class BaseAnchorServiceViewModel(application: Application) : BaseViewModel&amp;lt;AnchorService&amp;gt;(application) { val getHotAnchorListLiveData: MediatorLiveData&amp;lt;kotlin.collections.List&amp;lt;SearchHotAnchorModel&amp;gt;&amp;gt; by lazy { MediatorLiveData&amp;lt;kotlin.collections.List&amp;lt;SearchHotAnchorModel&amp;gt;&amp;gt;() } fun getHotAnchorList() { mService.getHotAnchorList().subscribe(BaseAppLiveDataObserver(getHotAnchorListLiveData)) } } 2：使用本地缓存展示之后进行网络获取更新 val getUserAssetsLiveData: MediatorLiveData&amp;lt;UserAssetsModel&amp;gt; by lazy { MediatorLiveData&amp;lt;UserAssetsModel&amp;gt;() } fun getUserAssets() { object : BaseAppNetworkBoundResource&amp;lt;UserAssetsModel&amp;gt;(getUserAssetsLiveData) { override fun doApiCall(): Observable&amp;lt;UserAssetsModel&amp;gt; { return mService.</description>
    </item>
    
    <item>
      <title>架构思考和实现</title>
      <link>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83%E5%92%8C%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/jetpack/arch/%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0/%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid>
      <description>架构设计过程 架构思考 graph LR subgraph 抽象客观事物 页面开发任务--&amp;gt;|抽象出模型|数据处理并展示 end subgraph 发现客观问题 数据处理并展示--&amp;gt;|发现问题|splitArch(需要分离界面和数据,分层架构) 数据处理并展示--&amp;gt;|发现问题|数据处理需要考虑界面生命周期 数据处理并展示--&amp;gt;|发现问题|ViewController需要声明式更新 数据处理并展示--&amp;gt;|发现问题|数据需要保留 数据处理并展示--&amp;gt;|发现问题|需要处理异步任务(&amp;quot;需要处理异步任务,结构化并发&amp;quot;) 数据处理并展示--&amp;gt;|发现问题|需要数据源emit多数据项 数据处理并展示--&amp;gt;|发现问题|需要抽象数据策略 数据处理并展示--&amp;gt;|发现问题|callback影响可读性 数据处理并展示--&amp;gt;|发现问题|层间依赖内部引用不灵活 数据处理并展示--&amp;gt;|发现问题|IOC时模板代码且无scope end subgraph 解决问题 splitArch--&amp;gt;|解决方案|MVC,MVP,MVVM(&amp;quot;MVC,MVP,MVVM(数据驱动)&amp;quot;) 数据处理需要考虑界面生命周期--&amp;gt;|解决方案|LifecycleAware组件 ViewController需要声明式更新--&amp;gt;|解决方案|DataBinding 数据需要保留--&amp;gt;|解决方案|ViewModel等三段式保留方案 需要处理异步任务--&amp;gt;|解决方案|Coroutine1(Coroutine) 需要数据源emit多数据项--&amp;gt;|解决方案|Flow 需要抽象数据策略--&amp;gt;|解决方案|NetworkBoundResource类族 callback影响可读性--&amp;gt;|解决方案|Coroutine2(Coroutine,Flow) 层间依赖内部引用不灵活--&amp;gt;|解决方案|IOC传入依赖 IOC时模板代码且无scope--&amp;gt;|解决方案|DI框架,如Hilt end 架构设计 Jetpack架构组件的通用最优落地设计如下
各层内设计 View Layer 类设计 Activity和Fragment是同样的继承结构设计，以Activity为例:
classDiagram class CommonActivity { +inflateContent(savedInstanceState: Bundle?) +init(savedInstanceState: Bundle?) } class CommonInflateActivity { +inflateContent(savedInstanceState: Bundle?) +getLayoutId()Int } class DataBindingActivity~VDB : ViewDataBinding~{ +inflateContent(savedInstanceState: Bundle?) +init(savedInstanceState: Bundle?) -bindVariable(activityDataBinding: VDB) +getLayoutId() Int +getVariableMap() Map } class ViewModelCommonActivity~VM : BaseViewModel~ { ~VM viewModel } class ViewModelBindingActivity~VDB : ViewDataBinding, VM : BaseViewModel~ { ~VM viewModel +getVariableMap()Map +getViewModelVariableId()Int } BaseActivity&amp;lt;|--CommonActivity CommonActivity&amp;lt;|--CommonInflateActivity CommonActivity&amp;lt;|--DataBindingActivity CommonInflateActivity&amp;lt;|--ViewModelCommonActivity DataBindingActivity&amp;lt;|--ViewModelBindingActivity Hilt构造并注入viewmodel DataBinding Design ViewModel Layer Hilt注入需要的Domain层Repository Data load type Trigger by lifecycle event automatic val userNameLiveData = liveData { emit(userRepository.</description>
    </item>
    
  </channel>
</rss>
