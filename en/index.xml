<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation for Hugo Learn Theme</title>
    <link>https://huanle19891345.github.io/en/</link>
    <description>Recent content on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 07 Jan 2021 18:14:29 +0800</lastBuildDate><atom:link href="https://huanle19891345.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bitmap1</title>
      <link>https://huanle19891345.github.io/en/android/bitmap/bitmap/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/bitmap/bitmap/</guid>
      <description>[TOC]
Bitmap像素存储 03 | 内存优化（上）：4GB内存时代，再谈内存优化
Android Bitmap变迁与原理解析（4.x-8.x）
Bitmap: 从出生到死亡
Bitmap创建 Java 层的创建 Bitmap 的所有 API 进入到 Native 层后，全都会走如下这四个步骤。
 ==资源转换== - 这一步将 Java 层传来的不同类型的资源转换成解码器可识别的数据类型 ==内存分配== - 分配内存时会考虑是否复用 Bitmap、是否缩放 Bitmap 等因素 ==图片解码== - 实际的解码工作由第三方库完成，解码结果填在上一步分配的内存中。注，Bitmap.createBitmap() 和 Bitmap.copy() 创建的 Bitmap 不需要进行图片解码 ==创建对象== - 这一步将包含解码数据的内存块包装成 Java 层的 android.graphics.Bitmap 对象，方便 App 使用  1. 资源转换 2. 内存分配 3. 图片解码 创建Java对象 Bitmap销毁 Bitmap.recycle() 自动释放：NativeAllocationRegistry NativeAllocationRegistry 用于将 native 内存跟 Java 对象关联，并将它们注册到 Java 运行时。注册 Java 对象关联的 native 内存有几个好处：</description>
    </item>
    
    <item>
      <title>BitmapX</title>
      <link>https://huanle19891345.github.io/en/android/bitmap/bitmapx/bitmap/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/bitmap/bitmapx/bitmap/</guid>
      <description>[TOC]
Bitmap像素存储 03 | 内存优化（上）：4GB内存时代，再谈内存优化
Android Bitmap变迁与原理解析（4.x-8.x）
Bitmap: 从出生到死亡
Bitmap创建 Java 层的创建 Bitmap 的所有 API 进入到 Native 层后，全都会走如下这四个步骤。
 ==资源转换== - 这一步将 Java 层传来的不同类型的资源转换成解码器可识别的数据类型 ==内存分配== - 分配内存时会考虑是否复用 Bitmap、是否缩放 Bitmap 等因素 ==图片解码== - 实际的解码工作由第三方库完成，解码结果填在上一步分配的内存中。注，Bitmap.createBitmap() 和 Bitmap.copy() 创建的 Bitmap 不需要进行图片解码 ==创建对象== - 这一步将包含解码数据的内存块包装成 Java 层的 android.graphics.Bitmap 对象，方便 App 使用  1. 资源转换 2. 内存分配 3. 图片解码 创建Java对象 Bitmap销毁 Bitmap.recycle() 自动释放：NativeAllocationRegistry NativeAllocationRegistry 用于将 native 内存跟 Java 对象关联，并将它们注册到 Java 运行时。注册 Java 对象关联的 native 内存有几个好处：</description>
    </item>
    
    <item>
      <title>BitmapXX</title>
      <link>https://huanle19891345.github.io/en/android/bitmap/bitmapx/bitmapxx/bitmap/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/bitmap/bitmapx/bitmapxx/bitmap/</guid>
      <description>[TOC]
Bitmap像素存储 03 | 内存优化（上）：4GB内存时代，再谈内存优化
Android Bitmap变迁与原理解析（4.x-8.x）
Bitmap: 从出生到死亡
Bitmap创建 Java 层的创建 Bitmap 的所有 API 进入到 Native 层后，全都会走如下这四个步骤。
 ==资源转换== - 这一步将 Java 层传来的不同类型的资源转换成解码器可识别的数据类型 ==内存分配== - 分配内存时会考虑是否复用 Bitmap、是否缩放 Bitmap 等因素 ==图片解码== - 实际的解码工作由第三方库完成，解码结果填在上一步分配的内存中。注，Bitmap.createBitmap() 和 Bitmap.copy() 创建的 Bitmap 不需要进行图片解码 ==创建对象== - 这一步将包含解码数据的内存块包装成 Java 层的 android.graphics.Bitmap 对象，方便 App 使用  1. 资源转换 2. 内存分配 3. 图片解码 创建Java对象 Bitmap销毁 Bitmap.recycle() 自动释放：NativeAllocationRegistry NativeAllocationRegistry 用于将 native 内存跟 Java 对象关联，并将它们注册到 Java 运行时。注册 Java 对象关联的 native 内存有几个好处：</description>
    </item>
    
    <item>
      <title>First_Bitmap</title>
      <link>https://huanle19891345.github.io/en/bitmap/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/bitmap/</guid>
      <description>[TOC]
Bitmap像素存储 03 | 内存优化（上）：4GB内存时代，再谈内存优化
Android Bitmap变迁与原理解析（4.x-8.x）
Bitmap: 从出生到死亡
Bitmap创建 Java 层的创建 Bitmap 的所有 API 进入到 Native 层后，全都会走如下这四个步骤。
 ==资源转换== - 这一步将 Java 层传来的不同类型的资源转换成解码器可识别的数据类型 ==内存分配== - 分配内存时会考虑是否复用 Bitmap、是否缩放 Bitmap 等因素 ==图片解码== - 实际的解码工作由第三方库完成，解码结果填在上一步分配的内存中。注，Bitmap.createBitmap() 和 Bitmap.copy() 创建的 Bitmap 不需要进行图片解码 ==创建对象== - 这一步将包含解码数据的内存块包装成 Java 层的 android.graphics.Bitmap 对象，方便 App 使用  1. 资源转换 2. 内存分配 3. 图片解码 创建Java对象 Bitmap销毁 Bitmap.recycle() 自动释放：NativeAllocationRegistry NativeAllocationRegistry 用于将 native 内存跟 Java 对象关联，并将它们注册到 Java 运行时。注册 Java 对象关联的 native 内存有几个好处：</description>
    </item>
    
    <item>
      <title>First_Level2</title>
      <link>https://huanle19891345.github.io/en/supporttoandroidx/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/supporttoandroidx/</guid>
      <description>title1 Title2 https://developer.android.google.cn/jetpack/androidx/migrate?hl=zh-cn
https://medium.com/androiddevelopers/migrating-to-androidx-tip-tricks-and-guidance-88d5de238876
是时候迁移至 AndroidX 了！
新架构单独封装一个独立的module(使用androidx)，和xhcore相互独立，确保项目组可以选择使用
support和androidx必须通过cherrypick进行修改同步，同时分别发布独立的maven
test模块是support或者androidx都没关系，不影响发版仓库中的内容
更基础的依赖模块，可能是support/androidx无关的，也可能有关的，有关时xhcore中调用的模块也要分离出support和androidx
xhcorexxx_without_support_single_branch模块可以不存在
androidx利用灰度版本去进行测试901
graph TB app_support--component_support_branch app_support--xhcorexxx_without_support_single_branch  graph TB app_support--&amp;gt;component_support_branch app_support--&amp;gt;xhcorexxx_without_support_single_branch app_androidx--&amp;gt;component_androidx_branch app_androidx--&amp;gt;xhcorexxx_without_support_single_branch xhcorexxx_without_support_single_branch--&amp;gt;xhviewxxx_without_support_single_branch component_support_branch--&amp;gt;xhviewxxx_support_branch component_androidx_branch--&amp;gt;xhviewxxx_androidx_branch   在xhcore中搜索support进行处理,去除不必要的support库依赖
  support升级到28
  </description>
    </item>
    
    <item>
      <title>First_Level3</title>
      <link>https://huanle19891345.github.io/en/android/androidx/supporttoandroidx/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/androidx/supporttoandroidx/</guid>
      <description>title1 Title2 https://developer.android.google.cn/jetpack/androidx/migrate?hl=zh-cn
https://medium.com/androiddevelopers/migrating-to-androidx-tip-tricks-and-guidance-88d5de238876
是时候迁移至 AndroidX 了！
新架构单独封装一个独立的module(使用androidx)，和xhcore相互独立，确保项目组可以选择使用
support和androidx必须通过cherrypick进行修改同步，同时分别发布独立的maven
test模块是support或者androidx都没关系，不影响发版仓库中的内容
更基础的依赖模块，可能是support/androidx无关的，也可能有关的，有关时xhcore中调用的模块也要分离出support和androidx
xhcorexxx_without_support_single_branch模块可以不存在
androidx利用灰度版本去进行测试901
graph TB app_support--component_support_branch app_support--xhcorexxx_without_support_single_branch  graph TB app_support--&amp;gt;component_support_branch app_support--&amp;gt;xhcorexxx_without_support_single_branch app_androidx--&amp;gt;component_androidx_branch app_androidx--&amp;gt;xhcorexxx_without_support_single_branch xhcorexxx_without_support_single_branch--&amp;gt;xhviewxxx_without_support_single_branch component_support_branch--&amp;gt;xhviewxxx_support_branch component_androidx_branch--&amp;gt;xhviewxxx_androidx_branch   在xhcore中搜索support进行处理,去除不必要的support库依赖
  support升级到28
  </description>
    </item>
    
    <item>
      <title>First_Levelcopy</title>
      <link>https://huanle19891345.github.io/en/android/androidx/supporttoandroidx-copy/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/androidx/supporttoandroidx-copy/</guid>
      <description>title1 Title2 https://developer.android.google.cn/jetpack/androidx/migrate?hl=zh-cn
https://medium.com/androiddevelopers/migrating-to-androidx-tip-tricks-and-guidance-88d5de238876
是时候迁移至 AndroidX 了！
新架构单独封装一个独立的module(使用androidx)，和xhcore相互独立，确保项目组可以选择使用
support和androidx必须通过cherrypick进行修改同步，同时分别发布独立的maven
test模块是support或者androidx都没关系，不影响发版仓库中的内容
更基础的依赖模块，可能是support/androidx无关的，也可能有关的，有关时xhcore中调用的模块也要分离出support和androidx
xhcorexxx_without_support_single_branch模块可以不存在
androidx利用灰度版本去进行测试901
graph TB app_support--component_support_branch app_support--xhcorexxx_without_support_single_branch  graph TB app_support--&amp;gt;component_support_branch app_support--&amp;gt;xhcorexxx_without_support_single_branch app_androidx--&amp;gt;component_androidx_branch app_androidx--&amp;gt;xhcorexxx_without_support_single_branch xhcorexxx_without_support_single_branch--&amp;gt;xhviewxxx_without_support_single_branch component_support_branch--&amp;gt;xhviewxxx_support_branch component_androidx_branch--&amp;gt;xhviewxxx_androidx_branch   在xhcore中搜索support进行处理,去除不必要的support库依赖
  support升级到28
  </description>
    </item>
    
    <item>
      <title>First_post2</title>
      <link>https://huanle19891345.github.io/en/first_post/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/first_post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>硬件加速绘制</title>
      <link>https://huanle19891345.github.io/en/android/%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E7%BB%98%E5%88%B6source/</link>
      <pubDate>Thu, 07 Jan 2021 18:14:29 +0800</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E7%BB%98%E5%88%B6source/</guid>
      <description>graph TB IRenderPipeline--&amp;gt;OpenGLPipeline IRenderPipeline--&amp;gt;SkiaPipeline--&amp;gt;SkiaOpenGLPipeline IRenderPipeline--&amp;gt;SkiaPipeline--&amp;gt;SkiaVulkanPipeline graph TB Thread--&amp;gt;ThreadBase ThreadBase--&amp;gt;ReanderThread frameworks/base/core/java/android/view/IWindow.aidl
IWindow /** * API back to a client window that the Window Manager uses to inform it of * interesting things happening. * * {@hide} */ oneway interface IWindow {} frameworks/base/core/java/android/view/IWindowSession.aidl
IWindowSession /** * System private per-application interface to the window manager. * * {@hide} */ interface IWindowSession {} ViewRootImpl // These can be accessed by any thread, must be protected with a lock.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://huanle19891345.github.io/en/android/androidx/first_post-copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/androidx/first_post-copy/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://huanle19891345.github.io/en/android/androidx/first_post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/android/androidx/first_post/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
