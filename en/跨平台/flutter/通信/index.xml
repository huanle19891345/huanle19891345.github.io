<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>通信 on 郑欢的学习总结</title>
    <link>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/</link>
    <description>Recent content in 通信 on 郑欢的学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EventChannel</title>
      <link>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/eventchannel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/eventchannel/</guid>
      <description>技术依赖 graph TB EventChannel--&amp;gt;|baseOn|MethodChannel EventChannel--&amp;gt;|baseOn|Stream 核心原理 sequenceDiagram rect rgb(199, 237, 204) Dart-&amp;gt;&amp;gt;Dart: stream.listen activate Dart Dart-&amp;gt;&amp;gt;Platform: methodChannel.invokeMethod(listen) deactivate Dart activate Platform Platform-&amp;gt;&amp;gt;Platform: onListen activate Platform Platform-&amp;gt;&amp;gt;Platform: handler.onListen(EventSink) deactivate Platform deactivate Platform end rect rgb(199, 237, 204) Platform-&amp;gt;&amp;gt;Platform: eventSink.success activate Platform Platform-&amp;gt;&amp;gt;Dart: messenger.send deactivate Platform activate Dart Dart-&amp;gt;&amp;gt;Dart: StreamController.add(T event) deactivate Dart end Usage Dart StreamBuilder Use demo参考/Users/qianpianpian/git/flutter/samples/platform_channels/lib/src/event_channel_demo.dart
使用StreamBuilder包裹stream
child: StreamBuilder&amp;lt;AccelerometerReadings&amp;gt;( stream: Accelerometer.readings,//stream  builder: (context, snapshot) { if (snapshot.hasError) { return Text((snapshot.</description>
    </item>
    
    <item>
      <title>MessageLoop</title>
      <link>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/messageloop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/messageloop/</guid>
      <description>TaskRunners::TaskRunners(std::string label, fml::RefPtr&amp;lt;fml::TaskRunner&amp;gt; platform, fml::RefPtr&amp;lt;fml::TaskRunner&amp;gt; gpu, fml::RefPtr&amp;lt;fml::TaskRunner&amp;gt; ui, fml::RefPtr&amp;lt;fml::TaskRunner&amp;gt; io) : label_(std::move(label)), platform_(std::move(platform)), gpu_(std::move(gpu)), ui_(std::move(ui)), io_(std::move(io)) {} ThreadHost::ThreadHost /// The collection of all the threads used by the engine. ThreadHost enum Type { Platform = 1 &amp;lt;&amp;lt; 0, UI = 1 &amp;lt;&amp;lt; 1, GPU = 1 &amp;lt;&amp;lt; 2, IO = 1 &amp;lt;&amp;lt; 3, }; std::unique_ptr&amp;lt;fml::Thread&amp;gt; platform_thread; std::unique_ptr&amp;lt;fml::Thread&amp;gt; ui_thread; std::unique_ptr&amp;lt;fml::Thread&amp;gt; gpu_thread; std::unique_ptr&amp;lt;fml::Thread&amp;gt; io_thread; ThreadHost(std::string name_prefix, uint64_t type_mask); ThreadHost::ThreadHost(std::string name_prefix, uint64_t mask) { if (mask &amp;amp; ThreadHost::Type::Platform) { platform_thread = std::make_unique&amp;lt;fml::Thread&amp;gt;(name_prefix + &amp;#34;.</description>
    </item>
    
    <item>
      <title>MethodChannel</title>
      <link>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/methodchannel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/methodchannel/</guid>
      <description>整体设计 graph LR subgraph DartVM Dart(DartFramework)--&amp;gt;|await|Engine(EngineC++) end subgraph Platform Engine--&amp;gt;|GetPlatformTaskRunner-&amp;gt;PostTask|PlatformC++--&amp;gt;PlatformJava PlatformJava--&amp;gt;PlatformC++ PlatformC++--&amp;gt;|ui_task_runner_-&amp;gt;PostTask|Engine--&amp;gt;Dart end 传递数据编解码设计 数据反向也是类似的编解码
graph LR subgraph Dart MethodCallDart(&amp;quot;MethodCall:StringMethodName,ObjectArguments&amp;quot;)--&amp;gt;|encode|ByteBufferDart(&amp;quot;ByteDataDart&amp;quot;) end ByteBufferDart--&amp;gt;Transport--&amp;gt;|decode|MethodCallNative subgraph native MethodCallNative end EngineUi线程接收消息模块设计 graph TB subgraph DartUiThreadNative ALooper_pollOnce--&amp;gt;MessageLoopAndroid::OnEventFired --&amp;gt;Engine::DispatchPlatformMessage--&amp;gt;RuntimeController::DispatchPlatformMessage --&amp;gt;PlatformConfiguration::DispatchPlatformMessage--&amp;gt;tonic::DartInvoke end subgraph DartUiThreadDart tonic::DartInvoke--&amp;gt;binding.dart--&amp;gt;platform_channel.dart--&amp;gt;callHandler end 类结构设计 MethodChannel classDiagram class MethodChannel { String name MethodCodec codec BinaryMessenger binaryMessenger } class MethodCodec { encodeMethodCall(MethodCall methodCall)ByteData decodeMethodCall(ByteData? methodCall)MethodCall decodeEnvelope(ByteData envelope)dynamic encodeSuccessEnvelope(dynamic result)ByteData encodeErrorEnvelope(String code, String? message, dynamic details)ByteData } class BinaryMessenger{ handlePlatformMessage(String channel, ByteData?</description>
    </item>
    
    <item>
      <title>Pigeon</title>
      <link>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/pigeon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huanle19891345.github.io/en/%E8%B7%A8%E5%B9%B3%E5%8F%B0/flutter/%E9%80%9A%E4%BF%A1/pigeon/</guid>
      <description>https://github.com/flutter/packages/tree/master/packages/pigeon
Pigeon介绍 Pigeon是Flutter官方推荐的，用于自动生成PlatformChannel通信层模板代码(channel定义，编解码，异常处理等)的package，可以减少通信层开发时间。生成的代码通过MessageChannel进行通信。pigeon则使用MessageChannel并针对每个api方法设置唯一的channelName来进行区分，BasicMessageChannel中的T,也就是request参数和response类型都是Object，并在传输过程中对model进行编解码成Map传输。
Pigeon功能 graph LR subgraph Pigeon/message.dart HostApi(&amp;quot;@HostApi&amp;quot;) FlutterApi(&amp;quot;@FlutterApi&amp;quot;) Class(&amp;quot;Define Class&amp;quot;) configurePigeon end subgraph server GenerateFlutterApi GenereateHostApi end subgraph client GenerateCallHostApi GenerateCallFullterApi end FlutterApi--&amp;gt;|handle in Flutter|GenerateFlutterApi(&amp;quot;abstract class FlutterApi:channel.setMessageHandler and delegate to FlutterApi&amp;quot;) GenerateCallHostApi(&amp;quot;class HostApi: wrap channel.send&amp;quot;)--&amp;gt;|Flutter to host|HostApi GenerateCallFullterApi(&amp;quot;classFlutterApi: wrap channel.send&amp;quot;)--&amp;gt;|host to Flutter|FlutterApi HostApi--&amp;gt;|handle in host|GenereateHostApi(&amp;quot;interface HostApi: channel.setMessageHandler and delegate to HostApi&amp;quot;) Pigeon 生成代码 Client端 class NativeNetworkApi { Future&amp;lt;Resource&amp;gt; request(RequestParams arg) async { final Object encoded = arg.encode(); const BasicMessageChannel&amp;lt;Object&amp;gt; channel = BasicMessageChannel&amp;lt;Object&amp;gt;(&amp;#39;dev.</description>
    </item>
    
  </channel>
</rss>
